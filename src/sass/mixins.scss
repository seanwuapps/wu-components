@mixin raiseTransition() {
  transition: box-shadow 0.3s ease-out;
}

@mixin raised($level) {
  @if $level == 0 {
    box-shadow: none;
  } @else if $level == 1 {
    box-shadow: 0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);
  } @else if $level == 2 {
    box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.3);
  } @else if $level == 3 {
    box-shadow: 0 8px 17px 2px rgba(0, 0, 0, 0.14), 0 3px 14px 2px rgba(0, 0, 0, 0.12),
      0 5px 5px -3px rgba(0, 0, 0, 0.2);
  } @else if $level == 4 {
    box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14), 0 6px 30px 5px rgba(0, 0, 0, 0.12),
      0 8px 10px -7px rgba(0, 0, 0, 0.2);
  } @else if $level == 5 {
    box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14), 0 9px 46px 8px rgba(0, 0, 0, 0.12),
      0 11px 15px -7px rgba(0, 0, 0, 0.2);
  } @else {
    box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 3px 1px -2px rgba(0, 0, 0, 0.12), 0 1px 5px 0 rgba(0, 0, 0, 0.2);
  }
  @include raiseTransition();
}

@mixin raisedHover() {
  box-shadow: 0 2px 7px 0 rgba(0, 0, 0, 0.2), 0 10px 18px 0 rgba(0, 0, 0, 0.19);
}
// Baseline, measured in pixels
// The value should be the same as the font-size value for the html element
// If the html element's font-size is set to 62.5% (of the browser's default font-size of 16px),
// then the variable below would be 10px.
$baseline-px: 10px;
@mixin rem($property, $px-values) {
  // Convert the baseline into rems
  $baseline-rem: $baseline-px / 1rem * 1; // Print the first line in pixel values
  #{$property}: $px-values; // If there is only one (numeric) value, return the property/value line for it.
  @if type-of($px-values) == 'number' {
    #{$property}: $px-values / $baseline-rem;
  } @else {
    // Create an empty list that we can dump values into
    $rem-values: ();
    @each $value in $px-values {
      // If the value is zero or not a number, return it
      @if $value == 0 or type-of($value) != 'number' {
        $rem-values: append($rem-values, $value);
      } @else {
        $rem-values: append($rem-values, $value / $baseline-rem);
      }
    } // Return the property and its list of converted values
    #{$property}: $rem-values;
  }
}

@mixin bg-cover($overlay-direction: '', $overlay-colors...) {
  background-repeat: no-repeat;
  background-size: cover;
  @if $overlay-direction != '' {
    position: relative;
    &::before {
      content: ' ';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      @include linear-gradient($overlay-direction, $overlay-colors);
    }
  }
}

@mixin centerOnScreen() {
  position: fixed;
  top: 50%;
  left: 50%;
  @include transform(translate(-50%, -50%));
}

// generic transform
@mixin transform($transforms) {
  -moz-transform: $transforms;
  -o-transform: $transforms;
  -ms-transform: $transforms;
  -webkit-transform: $transforms;
  transform: $transforms;
}

@mixin circle($size) {
  border-radius: 50%;
  @include rem('width', $size);
  @include rem('height', $size);
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: '';
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }
  > * {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

$themes: ('primary', 'secondary', 'success', 'warning', 'danger', 'info', 'light', 'grey', 'dark');

@mixin themeable($name: '') {
  @each $theme in $themes {
    @if ($name == 'button') {
      &[theme='#{$theme}'] {
        background: var(--color-#{$theme});
        color: var(--color-#{$theme}-contrast);
        &[outline] {
          background: white;
          border: 1px solid var(--color-#{$theme});
          color: currentColor;
        }
      }
    }
    @if ($name == 'menu-item') {
      &[theme='#{$theme}'] {
        color: var(--color-#{$theme});
        background: white;
      }
    }
    @if ($name == 'burger') {
      &[theme='#{$theme}'] {
        color: var(--color-#{$theme});
      }
    }

    @if ($name == 'toggle') {
      &[theme='#{$theme}'] {
        input {
          &:checked {
            & + .toggle-slider {
              background: var(--color-#{$theme});
              &::after {
                background: var(--color-#{$theme}-contrast);
              }
            }
          }
        }
      }
    }
    @if ($name== 'checkbox') {
      &[theme='#{$theme}'] {
        border-color: var(--color-#{$theme});
        background: var(--color-#{$theme}-contrast);
        &:checked {
          border-left-color: var(--color-#{$theme});
          border-bottom-color: var(--color-#{$theme});
        }
      }
    }
    @if ($name == 'text') {
      &[theme='#{$theme}'] {
        color: var(--color-#{$theme});
      }
    }
    @if ($name == '') {
      &[theme='#{$theme}'] {
        background: var(--color-#{$theme});
        color: var(--color-#{$theme}-contrast);
      }
    }
  }
}

/* Media queries */
$breakpoints: (
  xs: 0,
  sm: 768px,
  md: 1024px,
  lg: 1260px
);

@mixin media($breakpoint, $min-or-max: '') {
  @if $min-or-max == '' {
    $min-or-max: 'min';
  }
  @if map-has-key($breakpoints, $breakpoint) {
    $width: map-get($breakpoints, $breakpoint);

    $query: '(#{$min-or-max}-width: #{$width})';

    @media #{$query} {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint #{$breakpoint}.';
  }
}

@mixin panelMenu() {
  @each $bp, $width in $breakpoints {
    &[panel='#{$bp}'] {
      .side-menu {
        @include media($bp) {
          @include raised(0);
          transform: none;
          opacity: 1;
          border-right: 1px solid #dedede;
        }
      }
    }
  }
}

@mixin panelPage() {
  @each $bp, $width in $breakpoints {
    &[panel='#{$bp}'] {
      @include media($bp) {
        margin-left: var(--wu-drawer-menu-width);
      }
    }
  }
}
